fileFormatVersion: 2
guid: 5419c5d1d2ede4cde844dd059edfebce
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nexports.ScaleInterpolationType = exports.RotationInterpolationType
    = exports.PositionExtrapolationType = exports.PositionInterpolationType = exports.UpdateOwner
    = void 0;\r\nconst ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst ZEPETO_Multiplay_1
    = require(\"ZEPETO.Multiplay\");\r\nconst ZEPETO_World_1 = require(\"ZEPETO.World\");\r\nconst
    UnityEngine_1 = require(\"UnityEngine\");\r\nconst SyncIndexManager_1 = require(\"../Common/SyncIndexManager\");\r\nconst
    MultiplayManager_1 = require(\"../Common/MultiplayManager\");\r\nclass TransformSyncHelper
    extends ZEPETO_Script_1.ZepetoScriptBehaviour {\r\n    constructor() {\r\n       
    super(...arguments);\r\n        this.UpdateOwnerType = UpdateOwner.Undefine;\r\n       
    /** Sync Options **/\r\n        this.SyncPosition = true;\r\n        this.UseHardSnap
    = true;\r\n        this.HardSnapIfDistanceGreaterThan = 10;\r\n        this.InterpolationType
    = PositionInterpolationType.Estimate;\r\n        this.ExtrapolationType = PositionExtrapolationType.Disable;\r\n       
    this.extraMultipler = 1;\r\n        this.moveSpeed = 10;\r\n        this.SyncRotation
    = true;\r\n        this.RotationInterpolationType = RotationInterpolationType.Lerp;\r\n       
    this.rotateSpeed = 100;\r\n        this.SyncScale = false;\r\n        this.ScaleInterpolationType
    = ScaleInterpolationType.Lerp;\r\n        this.scaleUpSpeed = 100;\r\n       
    this._isOwner = false;\r\n        this._timeStampCount = 0;\r\n        this._tick
    = 0.04;\r\n        /** Interpolation **/\r\n        this._lastGetTimeOut = 0.04;
    //(newGet().timeStamp - prevGet().timeStamp) / 1000\r\n        this._bufferedState
    = new Array(2);\r\n        this.newGet = () => this._bufferedState?.length >
    0 ? this._bufferedState[0] : null;\r\n        this.prevGet = () => this._bufferedState?.length
    > 1 ? this._bufferedState[1] : null;\r\n    }\r\n    set Id(id) {\r\n       
    this._Id = id;\r\n    }\r\n    get Id() {\r\n        return this._Id;\r\n   
    }\r\n    get isOwner() {\r\n        return this._isOwner;\r\n    }\r\n    get
    OwnerSessionId() {\r\n        return this._ownerSessionId;\r\n    }\r\n    Start()
    {\r\n        if (!this._Id) {\r\n            SyncIndexManager_1.default.SyncIndex++;\r\n           
    this._Id = SyncIndexManager_1.default.SyncIndex.toString();\r\n        }\r\n       
    this._positionCache = this.transform.position;\r\n        this.SyncTransform();\r\n   
    }\r\n    FixedUpdate() {\r\n        if (!this.newGet())\r\n            return;\r\n       
    if (this.isOwner)\r\n            return;\r\n        if (this._objectStatus !=
    MultiplayManager_1.GameObjectStatus.Enable)\r\n            return;\r\n       
    if (this.SyncPosition) {\r\n            this.SyncPositionUpdate();\r\n       
    }\r\n        if (this.SyncRotation) {\r\n            this.SyncRotationUpdate();\r\n       
    }\r\n        if (this.SyncScale) {\r\n            this.SyncScaleUpdate();\r\n       
    }\r\n    }\r\n    SyncTransform() {\r\n        this._multiplay = UnityEngine_1.Object.FindObjectOfType($typeof(ZEPETO_World_1.ZepetoWorldMultiplay));\r\n       
    this._room = MultiplayManager_1.default.instance?.room;\r\n        if (this._room
    != null) {\r\n            this._room.add_OnStateChange(this.OnStateChange.bind(this));\r\n       
    }\r\n        else {\r\n            this._multiplay.add_RoomJoined(room => {\r\n               
    this._room = room;\r\n                this._room.add_OnStateChange(this.OnStateChange.bind(this));\r\n           
    });\r\n        }\r\n    }\r\n    // Access the entire server schema at first
    startup and connect the sync Id schema.\r\n    OnStateChange(state, isFirst)
    {\r\n        if (null == this._syncTransform) {\r\n            this._syncTransform
    = state.SyncTransforms.get_Item(this._Id);\r\n            if (this._syncTransform)
    {\r\n                this.OnChangeTransform();\r\n                this.ForceTarget();\r\n               
    this._syncTransform.add_OnChange(() => {\r\n                    this.OnChangeTransform();\r\n               
    });\r\n                this._room.remove_OnStateChange(this.OnStateChange.bind(this));\r\n           
    }\r\n            else {\r\n                // Initial definition if not defined
    on the server                \r\n                this._objectStatus = MultiplayManager_1.GameObjectStatus.Enable;\r\n               
    this.SendTransform();\r\n                this.SendStatus();\r\n            }\r\n       
    }\r\n    }\r\n    // A function that changes the owner of the update.\r\n   
    ChangeOwner(ownerSessionId) {\r\n        this._ownerSessionId = ownerSessionId;\r\n       
    if (null == this._room)\r\n            this._room = MultiplayManager_1.default.instance.room;\r\n       
    if (this._room.SessionId == ownerSessionId && !this._isOwner) {\r\n           
    this._isOwner = true;\r\n            this._sendCoroutine = this.StartCoroutine(this.CheckChangeTransform(this._tick));\r\n       
    }\r\n        else if (this._room.SessionId != ownerSessionId && this._isOwner)
    {\r\n            this._isOwner = false;\r\n            if (null != this._sendCoroutine)\r\n               
    this.StopCoroutine(this._sendCoroutine);\r\n        }\r\n    }\r\n    // when
    isOwner === false, Receives changed information from the server.\r\n    // Called
    when there is a change in the server schema.\r\n    OnChangeTransform() {\r\n       
    if (this._isOwner)\r\n            return;\r\n        const syncTransform = this._syncTransform;\r\n       
    const bufferedState = this._bufferedState;\r\n        if (syncTransform.status
    != this._objectStatus) {\r\n            this._objectStatus = syncTransform.status;\r\n           
    this.ChangeStatus(syncTransform.status);\r\n        }\r\n        const { position,
    rotation, scale, localPosition } = syncTransform;\r\n        // Shift buffer
    contents, oldest data erased, 0 becomes 1\r\n        bufferedState[1] = bufferedState[0];\r\n       
    // Save current received state as 0 in the buffer, safe to overwrite after shifting\r\n       
    const interpolState = {\r\n            timestamp: syncTransform.sendTime,\r\n           
    position: new UnityEngine_1.Vector3(position.x, position.y, position.z),\r\n           
    localPosition: new UnityEngine_1.Vector3(localPosition.x, localPosition.y, localPosition.z),\r\n           
    rotation: new UnityEngine_1.Quaternion(rotation.x, rotation.y, rotation.z, rotation.w),\r\n           
    scale: new UnityEngine_1.Vector3(scale.x, scale.y, scale.z),\r\n        };\r\n       
    bufferedState[0] = interpolState;\r\n        if (this._timeStampCount == 0) {\r\n           
    bufferedState[1] = interpolState;\r\n        }\r\n        // Increment state
    count but never exceed buffer size\r\n        this._timeStampCount = UnityEngine_1.Mathf.Min(this._timeStampCount
    + 1, bufferedState.length);\r\n        const timeStampDelta = syncTransform.sendTime
    - bufferedState[1].timestamp;\r\n        const timeOut = timeStampDelta / 1000;\r\n       
    this._lastGetTimeOut = timeOut < this._tick ? this._lastGetTimeOut : timeOut;\r\n   
    }\r\n    ChangeStatus(status) {\r\n        if (status == MultiplayManager_1.GameObjectStatus.Destroyed)\r\n           
    UnityEngine_1.Object.Destroy(this.gameObject);\r\n    }\r\n    ForceTarget()
    {\r\n        if (this._isOwner)\r\n            return;\r\n        if (null ==
    this.newGet())\r\n            return;\r\n        if (this.SyncPosition)\r\n           
    this.transform.position = this.newGet().position;\r\n        if (this.SyncRotation)\r\n           
    this.transform.rotation = this.newGet().rotation;\r\n        if (this.SyncScale)\r\n           
    this.transform.localScale = this.newGet().scale;\r\n    }\r\n    SyncPositionUpdate()
    {\r\n        //If the object has a parent, and only the parent is moving, it
    is more natural to use the local coordinate system to move Lerp.\r\n        if
    (this.transform.parent != null) {\r\n            if (UnityEngine_1.Vector3.Distance(this.newGet().localPosition,
    this.prevGet().localPosition) < 0.01) {\r\n                this.transform.localPosition
    = UnityEngine_1.Vector3.Lerp(this.transform.localPosition, this.newGet().localPosition,
    this.moveSpeed * UnityEngine_1.Time.fixedDeltaTime);\r\n                return;\r\n           
    }\r\n        }\r\n        //Teleport the object if it is further than a certain
    distance.\r\n        if (this.UseHardSnap) {\r\n            if (UnityEngine_1.Vector3.Distance(this.newGet().position,
    this.transform.position) > this.HardSnapIfDistanceGreaterThan) {\r\n               
    this.transform.position = this.newGet().position;\r\n                return;\r\n           
    }\r\n        }\r\n        const extraOffset = this.GetExtraPolationOffset();\r\n       
    const targetPos = UnityEngine_1.Vector3.op_Addition(this.newGet().position, extraOffset);\r\n       
    const getDis = UnityEngine_1.Vector3.Distance(this.newGet().position, this.prevGet().position);\r\n       
    const targetDis = UnityEngine_1.Vector3.Distance(targetPos, this._positionCache);\r\n       
    let extraSpeed;\r\n        if (this.InterpolationType == PositionInterpolationType.Estimate)
    {\r\n            extraSpeed = getDis == 0 ? this.moveSpeed : targetDis / this._lastGetTimeOut;\r\n       
    }\r\n        else if (UnityEngine_1.Vector3.op_Inequality(extraOffset, UnityEngine_1.Vector3.zero))
    {\r\n            // extra speed = originDis : originSpeed = extraDis : extraSpeed
    \r\n            // => extraSpeed = originSpeed * extraDis / originDis\r\n           
    extraSpeed = getDis == 0 ? this.moveSpeed : (this.moveSpeed * targetDis) / getDis;\r\n           
    extraSpeed = UnityEngine_1.Mathf.Clamp(extraSpeed, this.moveSpeed, this.moveSpeed
    * 2);\r\n        }\r\n        else {\r\n            extraSpeed = this.moveSpeed;\r\n       
    }\r\n        switch (+this.InterpolationType) {\r\n            case (PositionInterpolationType.None):\r\n               
    this.transform.position = targetPos;\r\n                break;\r\n           
    case (PositionInterpolationType.Lerp):\r\n                this.transform.position
    = UnityEngine_1.Vector3.Lerp(this.transform.position, targetPos, extraSpeed *
    UnityEngine_1.Time.fixedDeltaTime);\r\n                break;\r\n           
    case (PositionInterpolationType.MoveToward):\r\n                this.transform.position
    = UnityEngine_1.Vector3.MoveTowards(this.transform.position, targetPos, extraSpeed
    * UnityEngine_1.Time.fixedDeltaTime);\r\n                break;\r\n           
    case (PositionInterpolationType.Estimate):\r\n                this.transform.position
    = UnityEngine_1.Vector3.MoveTowards(this.transform.position, targetPos, extraSpeed
    * UnityEngine_1.Time.fixedDeltaTime);\r\n                break;\r\n        }\r\n   
    }\r\n    SyncRotationUpdate() {\r\n        switch (+this.RotationInterpolationType)
    {\r\n            case (RotationInterpolationType.None):\r\n                this.transform.rotation
    = this.newGet().rotation;\r\n                break;\r\n            case (RotationInterpolationType.Lerp):\r\n               
    this.transform.rotation = UnityEngine_1.Quaternion.Lerp(this.transform.rotation,
    this.newGet().rotation, this.rotateSpeed * UnityEngine_1.Time.fixedDeltaTime);\r\n               
    break;\r\n            case (RotationInterpolationType.MoveToward):\r\n               
    this.transform.rotation = UnityEngine_1.Quaternion.RotateTowards(this.transform.rotation,
    this.newGet().rotation, this.rotateSpeed * UnityEngine_1.Time.fixedDeltaTime);\r\n               
    break;\r\n        }\r\n    }\r\n    SyncScaleUpdate() {\r\n        switch (+this.ScaleInterpolationType)
    {\r\n            case (ScaleInterpolationType.None):\r\n                this.transform.localScale
    = this.newGet().scale;\r\n                break;\r\n            case (ScaleInterpolationType.Lerp):\r\n               
    this.transform.localScale = UnityEngine_1.Vector3.Lerp(this.transform.localScale,
    this.newGet().scale, this.scaleUpSpeed * UnityEngine_1.Time.fixedDeltaTime);\r\n               
    break;\r\n            case (ScaleInterpolationType.MoveToward):\r\n               
    this.transform.localScale = UnityEngine_1.Vector3.MoveTowards(this.transform.localScale,
    this.newGet().scale, this.scaleUpSpeed * UnityEngine_1.Time.fixedDeltaTime);\r\n               
    break;\r\n        }\r\n    }\r\n    /**\r\n     * Calculates an extrapolation
    offset based on the difference between the current and previous positions.\r\n    
    * If the extrapolation type is set to Disable, it returns a zero vector.\r\n    
    * Calculates the move direction between the current and previous positions, and
    the latency between the current time and the timestamp of the current position.\r\n    
    * Uses a switch statement to determine the type of extrapolation to be used and
    calculates the extrapolation offset accordingly.\r\n     * Returns the extrapolation
    offset calculated.\r\n     */\r\n    GetExtraPolationOffset() {\r\n        if
    (this.ExtrapolationType == PositionExtrapolationType.Disable) {\r\n           
    return UnityEngine_1.Vector3.zero;\r\n        }\r\n        if (UnityEngine_1.Vector3.op_Equality(this.newGet().position,
    this.prevGet().position)) {\r\n            return UnityEngine_1.Vector3.zero;\r\n       
    }\r\n        const moveDirection = UnityEngine_1.Vector3.Normalize(UnityEngine_1.Vector3.op_Subtraction(this.newGet().position,
    this.prevGet().position));\r\n        const latency = (MultiplayManager_1.default.instance.GetServerTime()
    - this.newGet().timestamp) / 1000;\r\n        let extraPolationOffSet = UnityEngine_1.Vector3.zero;\r\n       
    switch (+this.ExtrapolationType) {\r\n            case (PositionExtrapolationType.FixedSpeed):\r\n               
    extraPolationOffSet = UnityEngine_1.Vector3.op_Multiply(UnityEngine_1.Vector3.op_Multiply(UnityEngine_1.Vector3.op_Multiply(moveDirection,
    latency), this.moveSpeed), this.extraMultipler);\r\n                break;\r\n           
    case (PositionExtrapolationType.Estimate):\r\n                const estimatedSpeed
    = UnityEngine_1.Vector3.Distance(this.newGet().position, this.prevGet().position)
    / this._lastGetTimeOut;\r\n                extraPolationOffSet = UnityEngine_1.Vector3.op_Multiply(UnityEngine_1.Vector3.op_Multiply(UnityEngine_1.Vector3.op_Multiply(moveDirection,
    latency), estimatedSpeed), this.extraMultipler);\r\n                break;\r\n       
    }\r\n        return extraPolationOffSet;\r\n    }\r\n    // when isOwner, Sends
    information to the server.\r\n    *CheckChangeTransform(tick) {\r\n        const
    syncNextFrameMax = 10;\r\n        let syncNextFrameCount = 0;\r\n        let
    syncNowFrame = true;\r\n        let isFirst = true;\r\n        let pastPos =
    this.transform.localPosition;\r\n        let pastRot = this.transform.localRotation;\r\n       
    let pastScale = this.transform.localScale;\r\n        this._objectStatus = MultiplayManager_1.GameObjectStatus.Enable;\r\n       
    while (true) {\r\n            // Check if position has changed\r\n           
    if (this.SyncPosition && UnityEngine_1.Vector3.op_Inequality(pastPos, this.transform.localPosition))
    {\r\n                pastPos = this.transform.localPosition;\r\n               
    syncNowFrame = true;\r\n            }\r\n            // Check if rotation has
    changed\r\n            if (this.SyncRotation && UnityEngine_1.Quaternion.op_Inequality(pastRot,
    this.transform.localRotation)) {\r\n                pastRot = this.transform.localRotation;\r\n               
    syncNowFrame = true;\r\n            }\r\n            // Check if scale has changed\r\n           
    if (this.SyncScale && UnityEngine_1.Vector3.op_Inequality(pastScale, this.transform.localScale))
    {\r\n                pastScale = this.transform.localScale;\r\n               
    syncNowFrame = true;\r\n            }\r\n            //Transmit any values that
    have changed values.\r\n            if (syncNowFrame) {\r\n                this.SendTransform();\r\n               
    syncNowFrame = false;\r\n                syncNextFrameCount = 0;\r\n               
    if (isFirst) {\r\n                    this.SendStatus();\r\n                   
    isFirst = false;\r\n                }\r\n            }\r\n            //Send
    10 more frames even if stopped\r\n            else if (syncNextFrameCount < syncNextFrameMax)
    {\r\n                this.SendTransform();\r\n                syncNextFrameCount++;\r\n           
    }\r\n            yield new UnityEngine_1.WaitForSeconds(tick);\r\n        }\r\n   
    }\r\n    SendTransform() {\r\n        const data = new ZEPETO_Multiplay_1.RoomData();\r\n       
    data.Add(\"Id\", this._Id);\r\n        const pos = new ZEPETO_Multiplay_1.RoomData();\r\n       
    pos.Add(\"x\", this.transform.position.x);\r\n        pos.Add(\"y\", this.transform.position.y);\r\n       
    pos.Add(\"z\", this.transform.position.z);\r\n        data.Add(\"position\",
    pos.GetObject());\r\n        const localPos = new ZEPETO_Multiplay_1.RoomData();\r\n       
    localPos.Add(\"x\", this.transform.localPosition.x);\r\n        localPos.Add(\"y\",
    this.transform.localPosition.y);\r\n        localPos.Add(\"z\", this.transform.localPosition.z);\r\n       
    data.Add(\"localPosition\", localPos.GetObject());\r\n        const rot = new
    ZEPETO_Multiplay_1.RoomData();\r\n        rot.Add(\"x\", this.transform.rotation.x);\r\n       
    rot.Add(\"y\", this.transform.rotation.y);\r\n        rot.Add(\"z\", this.transform.rotation.z);\r\n       
    rot.Add(\"w\", this.transform.rotation.w);\r\n        data.Add(\"rotation\",
    rot.GetObject());\r\n        const scale = new ZEPETO_Multiplay_1.RoomData();\r\n       
    scale.Add(\"x\", this.transform.localScale.x);\r\n        scale.Add(\"y\", this.transform.localScale.y);\r\n       
    scale.Add(\"z\", this.transform.localScale.z);\r\n        data.Add(\"scale\",
    scale.GetObject());\r\n        data.Add(\"sendTime\", MultiplayManager_1.default.instance.GetServerTime());\r\n       
    // Send data to server\r\n        this._room.Send(MESSAGE.SyncTransform, data.GetObject());\r\n   
    }\r\n    SendStatus() {\r\n        const data = new ZEPETO_Multiplay_1.RoomData();\r\n       
    data.Add(\"Id\", this.Id);\r\n        data.Add(\"Status\", this._objectStatus);\r\n       
    this._room.Send(MESSAGE.SyncTransformStatus, data.GetObject());\r\n    }\r\n}\r\nexports.default
    = TransformSyncHelper;\r\nvar UpdateOwner;\r\n(function (UpdateOwner) {\r\n   
    UpdateOwner[UpdateOwner[\"Master\"] = 0] = \"Master\";\r\n    UpdateOwner[UpdateOwner[\"Undefine\"]
    = 1] = \"Undefine\";\r\n})(UpdateOwner = exports.UpdateOwner || (exports.UpdateOwner
    = {}));\r\nvar PositionInterpolationType;\r\n(function (PositionInterpolationType)
    {\r\n    PositionInterpolationType[PositionInterpolationType[\"None\"] = 0] =
    \"None\";\r\n    PositionInterpolationType[PositionInterpolationType[\"Lerp\"]
    = 1] = \"Lerp\";\r\n    PositionInterpolationType[PositionInterpolationType[\"MoveToward\"]
    = 2] = \"MoveToward\";\r\n    PositionInterpolationType[PositionInterpolationType[\"Estimate\"]
    = 3] = \"Estimate\";\r\n})(PositionInterpolationType = exports.PositionInterpolationType
    || (exports.PositionInterpolationType = {}));\r\nvar PositionExtrapolationType;\r\n(function
    (PositionExtrapolationType) {\r\n    PositionExtrapolationType[PositionExtrapolationType[\"Disable\"]
    = 0] = \"Disable\";\r\n    PositionExtrapolationType[PositionExtrapolationType[\"FixedSpeed\"]
    = 1] = \"FixedSpeed\";\r\n    PositionExtrapolationType[PositionExtrapolationType[\"Estimate\"]
    = 2] = \"Estimate\";\r\n})(PositionExtrapolationType = exports.PositionExtrapolationType
    || (exports.PositionExtrapolationType = {}));\r\nvar RotationInterpolationType;\r\n(function
    (RotationInterpolationType) {\r\n    RotationInterpolationType[RotationInterpolationType[\"None\"]
    = 0] = \"None\";\r\n    RotationInterpolationType[RotationInterpolationType[\"Lerp\"]
    = 1] = \"Lerp\";\r\n    RotationInterpolationType[RotationInterpolationType[\"MoveToward\"]
    = 2] = \"MoveToward\";\r\n})(RotationInterpolationType = exports.RotationInterpolationType
    || (exports.RotationInterpolationType = {}));\r\nvar ScaleInterpolationType;\r\n(function
    (ScaleInterpolationType) {\r\n    ScaleInterpolationType[ScaleInterpolationType[\"None\"]
    = 0] = \"None\";\r\n    ScaleInterpolationType[ScaleInterpolationType[\"Lerp\"]
    = 1] = \"Lerp\";\r\n    ScaleInterpolationType[ScaleInterpolationType[\"MoveToward\"]
    = 2] = \"MoveToward\";\r\n})(ScaleInterpolationType = exports.ScaleInterpolationType
    || (exports.ScaleInterpolationType = {}));\r\nvar MESSAGE;\r\n(function (MESSAGE)
    {\r\n    MESSAGE[\"SyncTransform\"] = \"SyncTransform\";\r\n    MESSAGE[\"SyncTransformStatus\"]
    = \"SyncTransformStatus\";\r\n})(MESSAGE || (MESSAGE = {}));\r\n//# sourceMappingURL=data:application/json;base64,","assetPath":"Assets/Zepeto
    Multiplay Component/ZepetoScript/Transform/TransformSyncHelper.ts","manifest":{"properties":[{"assembly":"","name":"UpdateOwnerType","type":"UpdateOwner","isArray":false,"initValue":["Undefine"],"enumKeys":["Master","Undefine"],"enumValues":["0","1"],"attributes":[]},{"assembly":"mscorlib","name":"SyncPosition","type":"System.Boolean","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Position\""]}]},{"assembly":"mscorlib","name":"UseHardSnap","type":"System.Boolean","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"mscorlib","name":"HardSnapIfDistanceGreaterThan","type":"System.Single","isArray":false,"initValue":["10"],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Tooltip","args":["\"Force
    the position to be modified if it is farther than this number.\""]}]},{"assembly":"","name":"InterpolationType","type":"PositionInterpolationType","isArray":false,"initValue":["Estimate"],"enumKeys":["None","Lerp","MoveToward","Estimate"],"enumValues":["0","1","2","3"],"attributes":[]},{"assembly":"","name":"ExtrapolationType","type":"PositionExtrapolationType","isArray":false,"initValue":["Disable"],"enumKeys":["Disable","FixedSpeed","Estimate"],"enumValues":["0","1","2"],"attributes":[]},{"assembly":"mscorlib","name":"extraMultipler","type":"System.Single","isArray":false,"initValue":["1"],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Tooltip","args":["\"The
    creditworthiness of the offset figure of the extrapolation.\""]}]},{"assembly":"mscorlib","name":"moveSpeed","type":"System.Single","isArray":false,"initValue":["10"],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Tooltip","args":["\"This
    is the given speed for lerp / movetoward / fixedspeed options.\""]}]},{"assembly":"mscorlib","name":"SyncRotation","type":"System.Boolean","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Rotation\""]}]},{"assembly":"","name":"RotationInterpolationType","type":"RotationInterpolationType","isArray":false,"initValue":["Lerp"],"enumKeys":["None","Lerp","MoveToward"],"enumValues":["0","1","2"],"attributes":[]},{"assembly":"mscorlib","name":"rotateSpeed","type":"System.Single","isArray":false,"initValue":["100"],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"mscorlib","name":"SyncScale","type":"System.Boolean","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Scale\""]}]},{"assembly":"","name":"ScaleInterpolationType","type":"ScaleInterpolationType","isArray":false,"initValue":["Lerp"],"enumKeys":["None","Lerp","MoveToward"],"enumValues":["0","1","2"],"attributes":[]},{"assembly":"mscorlib","name":"scaleUpSpeed","type":"System.Single","isArray":false,"initValue":["100"],"enumKeys":[],"enumValues":[],"attributes":[]}],"name":"TransformSyncHelper","description":""},"isCompiled":true}'
  typescriptHash: 601223115227460cab91cce15fd37f32
  onlyWriteTrigger: 0
